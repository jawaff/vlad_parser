# Generated from ./grammar/VLADLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .LexerAdaptor import LexerAdaptor
else:
    from LexerAdaptor import LexerAdaptor

def serializedATN():
    return [
        4,0,37,474,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,
        256,8,32,10,32,12,32,259,9,32,1,33,4,33,262,8,33,11,33,12,33,263,
        1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,3,35,274,8,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,38,1,38,5,38,284,8,38,10,38,12,38,287,9,38,
        1,38,1,38,1,38,3,38,292,8,38,1,39,1,39,1,39,1,39,1,39,5,39,299,8,
        39,10,39,12,39,302,9,39,1,39,1,39,1,39,3,39,307,8,39,1,40,1,40,1,
        40,1,40,5,40,313,8,40,10,40,12,40,316,9,40,1,41,1,41,1,41,1,41,1,
        41,3,41,323,8,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,333,
        8,43,3,43,335,8,43,3,43,337,8,43,3,43,339,8,43,1,44,1,44,1,44,5,
        44,344,8,44,10,44,12,44,347,9,44,3,44,349,8,44,1,45,1,45,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,364,8,47,1,
        48,1,48,1,48,3,48,369,8,48,1,48,1,48,1,49,1,49,1,49,5,49,376,8,49,
        10,49,12,49,379,9,49,1,49,1,49,1,50,1,50,1,50,5,50,386,8,50,10,50,
        12,50,389,9,50,1,50,1,50,1,51,1,51,1,51,5,51,396,8,51,10,51,12,51,
        399,9,51,1,52,1,52,1,52,1,52,3,52,405,8,52,1,53,1,53,1,54,1,54,1,
        54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,
        60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,
        66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,
        72,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,
        78,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,2,285,
        300,0,84,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,23,
        14,25,15,27,16,29,17,31,18,33,19,35,20,37,21,39,22,41,23,43,24,45,
        25,47,26,49,27,51,28,53,29,55,30,57,31,59,32,61,33,63,34,65,35,67,
        36,69,37,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,
        93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,
        0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,137,
        0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,0,157,0,159,
        0,161,0,163,0,165,0,167,0,1,0,12,3,0,9,10,12,13,32,32,2,0,9,9,32,
        32,2,0,10,10,12,13,2,0,10,10,13,13,8,0,34,34,39,39,92,92,98,98,102,
        102,110,110,114,114,116,116,1,0,49,57,3,0,48,57,65,70,97,102,1,0,
        48,57,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,3,
        0,183,183,768,879,8255,8256,13,0,65,90,97,122,192,214,216,246,248,
        767,880,893,895,8191,8204,8205,8304,8591,11264,12271,12289,55295,
        63744,64975,65008,65533,452,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,1,169,1,0,0,0,3,173,1,0,0,0,5,177,1,0,0,
        0,7,181,1,0,0,0,9,183,1,0,0,0,11,186,1,0,0,0,13,188,1,0,0,0,15,190,
        1,0,0,0,17,199,1,0,0,0,19,207,1,0,0,0,21,209,1,0,0,0,23,211,1,0,
        0,0,25,213,1,0,0,0,27,215,1,0,0,0,29,217,1,0,0,0,31,219,1,0,0,0,
        33,221,1,0,0,0,35,223,1,0,0,0,37,225,1,0,0,0,39,227,1,0,0,0,41,229,
        1,0,0,0,43,231,1,0,0,0,45,233,1,0,0,0,47,235,1,0,0,0,49,237,1,0,
        0,0,51,239,1,0,0,0,53,241,1,0,0,0,55,243,1,0,0,0,57,245,1,0,0,0,
        59,247,1,0,0,0,61,249,1,0,0,0,63,251,1,0,0,0,65,253,1,0,0,0,67,261,
        1,0,0,0,69,267,1,0,0,0,71,273,1,0,0,0,73,275,1,0,0,0,75,277,1,0,
        0,0,77,279,1,0,0,0,79,293,1,0,0,0,81,308,1,0,0,0,83,317,1,0,0,0,
        85,324,1,0,0,0,87,327,1,0,0,0,89,348,1,0,0,0,91,350,1,0,0,0,93,352,
        1,0,0,0,95,363,1,0,0,0,97,365,1,0,0,0,99,372,1,0,0,0,101,382,1,0,
        0,0,103,392,1,0,0,0,105,404,1,0,0,0,107,406,1,0,0,0,109,408,1,0,
        0,0,111,412,1,0,0,0,113,414,1,0,0,0,115,416,1,0,0,0,117,419,1,0,
        0,0,119,421,1,0,0,0,121,423,1,0,0,0,123,425,1,0,0,0,125,427,1,0,
        0,0,127,429,1,0,0,0,129,431,1,0,0,0,131,433,1,0,0,0,133,435,1,0,
        0,0,135,438,1,0,0,0,137,440,1,0,0,0,139,442,1,0,0,0,141,444,1,0,
        0,0,143,446,1,0,0,0,145,448,1,0,0,0,147,450,1,0,0,0,149,453,1,0,
        0,0,151,455,1,0,0,0,153,457,1,0,0,0,155,459,1,0,0,0,157,461,1,0,
        0,0,159,463,1,0,0,0,161,465,1,0,0,0,163,468,1,0,0,0,165,470,1,0,
        0,0,167,472,1,0,0,0,169,170,3,79,39,0,170,171,1,0,0,0,171,172,6,
        0,0,0,172,2,1,0,0,0,173,174,3,77,38,0,174,175,1,0,0,0,175,176,6,
        1,0,0,176,4,1,0,0,0,177,178,3,81,40,0,178,179,1,0,0,0,179,180,6,
        2,0,0,180,6,1,0,0,0,181,182,3,89,44,0,182,8,1,0,0,0,183,184,5,114,
        0,0,184,185,3,99,49,0,185,10,1,0,0,0,186,187,3,99,49,0,187,12,1,
        0,0,0,188,189,3,103,51,0,189,14,1,0,0,0,190,191,5,102,0,0,191,192,
        5,114,0,0,192,193,5,97,0,0,193,194,5,103,0,0,194,195,5,109,0,0,195,
        196,5,101,0,0,196,197,5,110,0,0,197,198,5,116,0,0,198,16,1,0,0,0,
        199,200,5,115,0,0,200,201,5,112,0,0,201,202,5,101,0,0,202,203,5,
        99,0,0,203,204,5,105,0,0,204,205,5,97,0,0,205,206,5,108,0,0,206,
        18,1,0,0,0,207,208,3,113,56,0,208,20,1,0,0,0,209,210,3,115,57,0,
        210,22,1,0,0,0,211,212,3,155,77,0,212,24,1,0,0,0,213,214,3,157,78,
        0,214,26,1,0,0,0,215,216,3,121,60,0,216,28,1,0,0,0,217,218,3,123,
        61,0,218,30,1,0,0,0,219,220,3,125,62,0,220,32,1,0,0,0,221,222,3,
        127,63,0,222,34,1,0,0,0,223,224,3,133,66,0,224,36,1,0,0,0,225,226,
        3,135,67,0,226,38,1,0,0,0,227,228,3,137,68,0,228,40,1,0,0,0,229,
        230,3,139,69,0,230,42,1,0,0,0,231,232,3,141,70,0,232,44,1,0,0,0,
        233,234,3,143,71,0,234,46,1,0,0,0,235,236,3,147,73,0,236,48,1,0,
        0,0,237,238,3,145,72,0,238,50,1,0,0,0,239,240,3,151,75,0,240,52,
        1,0,0,0,241,242,3,153,76,0,242,54,1,0,0,0,243,244,3,161,80,0,244,
        56,1,0,0,0,245,246,3,159,79,0,246,58,1,0,0,0,247,248,3,163,81,0,
        248,60,1,0,0,0,249,250,3,165,82,0,250,62,1,0,0,0,251,252,3,167,83,
        0,252,64,1,0,0,0,253,257,3,107,53,0,254,256,3,105,52,0,255,254,1,
        0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,66,1,0,
        0,0,259,257,1,0,0,0,260,262,7,0,0,0,261,260,1,0,0,0,262,263,1,0,
        0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,6,33,
        1,0,266,68,1,0,0,0,267,268,9,0,0,0,268,269,1,0,0,0,269,270,6,34,
        2,0,270,70,1,0,0,0,271,274,3,73,36,0,272,274,3,75,37,0,273,271,1,
        0,0,0,273,272,1,0,0,0,274,72,1,0,0,0,275,276,7,1,0,0,276,74,1,0,
        0,0,277,278,7,2,0,0,278,76,1,0,0,0,279,280,5,47,0,0,280,281,5,42,
        0,0,281,285,1,0,0,0,282,284,9,0,0,0,283,282,1,0,0,0,284,287,1,0,
        0,0,285,286,1,0,0,0,285,283,1,0,0,0,286,291,1,0,0,0,287,285,1,0,
        0,0,288,289,5,42,0,0,289,292,5,47,0,0,290,292,5,0,0,1,291,288,1,
        0,0,0,291,290,1,0,0,0,292,78,1,0,0,0,293,294,5,47,0,0,294,295,5,
        42,0,0,295,296,5,42,0,0,296,300,1,0,0,0,297,299,9,0,0,0,298,297,
        1,0,0,0,299,302,1,0,0,0,300,301,1,0,0,0,300,298,1,0,0,0,301,306,
        1,0,0,0,302,300,1,0,0,0,303,304,5,42,0,0,304,307,5,47,0,0,305,307,
        5,0,0,1,306,303,1,0,0,0,306,305,1,0,0,0,307,80,1,0,0,0,308,309,5,
        47,0,0,309,310,5,47,0,0,310,314,1,0,0,0,311,313,8,3,0,0,312,311,
        1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,82,1,
        0,0,0,316,314,1,0,0,0,317,322,3,111,55,0,318,323,7,4,0,0,319,323,
        3,87,43,0,320,323,9,0,0,0,321,323,5,0,0,1,322,318,1,0,0,0,322,319,
        1,0,0,0,322,320,1,0,0,0,322,321,1,0,0,0,323,84,1,0,0,0,324,325,3,
        111,55,0,325,326,9,0,0,0,326,86,1,0,0,0,327,338,5,117,0,0,328,336,
        3,91,45,0,329,334,3,91,45,0,330,332,3,91,45,0,331,333,3,91,45,0,
        332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,330,1,0,0,0,
        334,335,1,0,0,0,335,337,1,0,0,0,336,329,1,0,0,0,336,337,1,0,0,0,
        337,339,1,0,0,0,338,328,1,0,0,0,338,339,1,0,0,0,339,88,1,0,0,0,340,
        349,5,48,0,0,341,345,7,5,0,0,342,344,3,93,46,0,343,342,1,0,0,0,344,
        347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,
        345,1,0,0,0,348,340,1,0,0,0,348,341,1,0,0,0,349,90,1,0,0,0,350,351,
        7,6,0,0,351,92,1,0,0,0,352,353,7,7,0,0,353,94,1,0,0,0,354,355,5,
        116,0,0,355,356,5,114,0,0,356,357,5,117,0,0,357,364,5,101,0,0,358,
        359,5,102,0,0,359,360,5,97,0,0,360,361,5,108,0,0,361,362,5,115,0,
        0,362,364,5,101,0,0,363,354,1,0,0,0,363,358,1,0,0,0,364,96,1,0,0,
        0,365,368,3,117,58,0,366,369,3,83,41,0,367,369,8,8,0,0,368,366,1,
        0,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,371,3,117,58,0,371,98,
        1,0,0,0,372,377,3,117,58,0,373,376,3,83,41,0,374,376,8,8,0,0,375,
        373,1,0,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,
        378,1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,381,3,117,58,0,381,
        100,1,0,0,0,382,387,3,119,59,0,383,386,3,83,41,0,384,386,8,9,0,0,
        385,383,1,0,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,
        387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,3,119,59,
        0,391,102,1,0,0,0,392,397,3,117,58,0,393,396,3,83,41,0,394,396,8,
        8,0,0,395,393,1,0,0,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,1,
        0,0,0,397,398,1,0,0,0,398,104,1,0,0,0,399,397,1,0,0,0,400,405,3,
        107,53,0,401,405,2,48,57,0,402,405,3,149,74,0,403,405,7,10,0,0,404,
        400,1,0,0,0,404,401,1,0,0,0,404,402,1,0,0,0,404,403,1,0,0,0,405,
        106,1,0,0,0,406,407,7,11,0,0,407,108,1,0,0,0,408,409,5,105,0,0,409,
        410,5,110,0,0,410,411,5,116,0,0,411,110,1,0,0,0,412,413,5,92,0,0,
        413,112,1,0,0,0,414,415,5,58,0,0,415,114,1,0,0,0,416,417,5,58,0,
        0,417,418,5,58,0,0,418,116,1,0,0,0,419,420,5,39,0,0,420,118,1,0,
        0,0,421,422,5,34,0,0,422,120,1,0,0,0,423,424,5,40,0,0,424,122,1,
        0,0,0,425,426,5,41,0,0,426,124,1,0,0,0,427,428,5,123,0,0,428,126,
        1,0,0,0,429,430,5,125,0,0,430,128,1,0,0,0,431,432,5,91,0,0,432,130,
        1,0,0,0,433,434,5,93,0,0,434,132,1,0,0,0,435,436,5,45,0,0,436,437,
        5,62,0,0,437,134,1,0,0,0,438,439,5,60,0,0,439,136,1,0,0,0,440,441,
        5,62,0,0,441,138,1,0,0,0,442,443,5,61,0,0,443,140,1,0,0,0,444,445,
        5,63,0,0,445,142,1,0,0,0,446,447,5,42,0,0,447,144,1,0,0,0,448,449,
        5,43,0,0,449,146,1,0,0,0,450,451,5,43,0,0,451,452,5,61,0,0,452,148,
        1,0,0,0,453,454,5,95,0,0,454,150,1,0,0,0,455,456,5,124,0,0,456,152,
        1,0,0,0,457,458,5,36,0,0,458,154,1,0,0,0,459,460,5,44,0,0,460,156,
        1,0,0,0,461,462,5,59,0,0,462,158,1,0,0,0,463,464,5,46,0,0,464,160,
        1,0,0,0,465,466,5,46,0,0,466,467,5,46,0,0,467,162,1,0,0,0,468,469,
        5,64,0,0,469,164,1,0,0,0,470,471,5,35,0,0,471,166,1,0,0,0,472,473,
        5,126,0,0,473,168,1,0,0,0,25,0,257,263,273,285,291,300,306,314,322,
        332,334,336,338,345,348,363,368,375,377,385,387,395,397,404,3,0,
        2,0,6,0,0,0,1,0
    ]

class VLADLexer(LexerAdaptor):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 2

    FRAGMENT_REF = 1
    RULE_REF = 2
    DOC_COMMENT = 3
    BLOCK_COMMENT = 4
    LINE_COMMENT = 5
    INT = 6
    REGEX_LITERAL = 7
    STRING_LITERAL = 8
    UNTERMINATED_STRING_LITERAL = 9
    FRAGMENT = 10
    SPECIAL = 11
    COLON = 12
    COLONCOLON = 13
    COMMA = 14
    SEMI = 15
    LPAREN = 16
    RPAREN = 17
    LBRACE = 18
    RBRACE = 19
    RARROW = 20
    LT = 21
    GT = 22
    ASSIGN = 23
    QUESTION = 24
    STAR = 25
    PLUS_ASSIGN = 26
    PLUS = 27
    OR = 28
    DOLLAR = 29
    RANGE = 30
    DOT = 31
    AT = 32
    POUND = 33
    NOT = 34
    ID = 35
    WS = 36
    ERRCHAR = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"COMMENT" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'fragment'", "'special'" ]

    symbolicNames = [ "<INVALID>",
            "FRAGMENT_REF", "RULE_REF", "DOC_COMMENT", "BLOCK_COMMENT", 
            "LINE_COMMENT", "INT", "REGEX_LITERAL", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
            "FRAGMENT", "SPECIAL", "COLON", "COLONCOLON", "COMMA", "SEMI", 
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", "GT", 
            "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", 
            "RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR" ]

    ruleNames = [ "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "INT", 
                  "REGEX_LITERAL", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
                  "FRAGMENT", "SPECIAL", "COLON", "COLONCOLON", "COMMA", 
                  "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", 
                  "LT", "GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", 
                  "PLUS", "OR", "DOLLAR", "RANGE", "DOT", "AT", "POUND", 
                  "NOT", "ID", "WS", "ERRCHAR", "Ws", "Hws", "Vws", "BlockComment", 
                  "DocComment", "LineComment", "EscSeq", "EscAny", "UnicodeEsc", 
                  "DecimalNumeral", "HexDigit", "DecDigit", "BoolLiteral", 
                  "CharLiteral", "SQuoteLiteral", "DQuoteLiteral", "USQuoteLiteral", 
                  "NameChar", "NameStartChar", "Int", "Esc", "Colon", "DColon", 
                  "SQuote", "DQuote", "LParen", "RParen", "LBrace", "RBrace", 
                  "LBrack", "RBrack", "RArrow", "Lt", "Gt", "Equal", "Question", 
                  "Star", "Plus", "PlusAssign", "Underscore", "Pipe", "Dollar", 
                  "Comma", "Semi", "Dot", "Range", "At", "Pound", "Tilde" ]

    grammarFileName = "VLADLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


